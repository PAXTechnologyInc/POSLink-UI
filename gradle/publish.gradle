apply plugin: "maven-publish"

def isAndroidPlugin() {
    def plugins = project.getPlugins()
    return plugins.hasPlugin('com.android.application') || plugins.hasPlugin('com.android.library')
}

def isJavaPlugin() {
    def plugins = project.getPlugins()
    return plugins.hasPlugin('java-library')
}

if (isAndroidPlugin()) {
    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
    }

    task androidJavadocsJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
} else if(isJavaPlugin()) {
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

if(isAndroidPlugin() || isJavaPlugin()) {
    project.afterEvaluate {
        publishing {
            repositories {
                maven {
                    name = _mavenName
                    url = uri(_publishingUrl)
                    credentials {
                        username = GITHUB_USER_NAME
                        password = GITHUB_USER_TOKEN
                    }
                }
            }

            publications {
                gpr(MavenPublication) {

                    groupId = _groupId
                    artifactId = _artifactId
                    version = GLOBAL_VERSION
                    //artifact javadocJar
                    println "publishing $version"

                    if (isAndroidPlugin()) {
                        artifact bundleReleaseAar
                        artifact androidSourcesJar

                        pom.withXml {
                            final dependenciesNode = asNode().appendNode('dependencies')
                            ext.addDependency = { Configuration configuration, String scope ->
                                configuration.getDependencies().each { dep ->
                                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified") {
                                        println "invalid dep " + dep.toString()
                                        return // ignore invalid dependencies
                                    }
                                    final dependencyNode = dependenciesNode.appendNode('dependency')
                                    dependencyNode.appendNode('groupId', dep.group)
                                    if (dep instanceof ProjectDependency) {
                                        dependencyNode.appendNode('artifactId', dep.dependencyProject.ext.get("_artifactId"))
                                    } else {
                                        dependencyNode.appendNode('artifactId', dep.name)
                                    }
                                    dependencyNode.appendNode('version', dep.version)
                                    dependencyNode.appendNode('scope', scope)
                                    if (!dep.transitive) {
                                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                                        exclusionNode.appendNode('groupId', '*')
                                        exclusionNode.appendNode('artifactId', '*')
                                    } else if (!dep.properties.excludeRules.empty) {
                                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                                        dep.properties.excludeRules.each { ExcludeRule rule ->
                                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                                        }
                                    }
                                }
                            }

                            if (isAndroidPlugin()) {
                                addDependency(configurations.androidTestApi, 'test')
                                addDependency(configurations.androidTestImplementation, 'test')
                            }
                            addDependency(configurations.api, 'compile')
                            addDependency(configurations.implementation, 'compile')
                            addDependency(configurations.compileOnly, 'provided')
                            addDependency(configurations.runtimeOnly, 'runtime')
                            addDependency(configurations.provided, 'provided')
                            addDependency(configurations.compileOnly, 'provided')

                            addDependency(configurations.testCompile, 'test')
                            addDependency(configurations.testApi, 'test')
                            addDependency(configurations.testImplementation, 'test')
                        }
                    } else {
                        from(components.java)
                        artifact sourcesJar
                    }
                }
            }
        }
    }
}
